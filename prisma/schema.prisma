// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// Authorization
enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  loginProvider String?
  Website       Website[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationToken {
  id      String   @id @default(cuid())
  userId  String?
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Massive app
model Website {
  id          String   @id @default(cuid())
  userId      String
  websiteName String
  domainUrl   String
  gscUrl      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  location Location[]
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Location {
  id                   String   @id @default(cuid())
  websiteId            String
  keywordTrackerToolId String?
  language             String
  languageCode         String
  country              String
  location             String?
  locationCode         String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  website                   Website                    @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  googleKeywordTrackerTool  GoogleKeywordTrackerTool?
  googleLocationTrackerTool GoogleLocationTrackerTool?
}

// Google Keyword Tracker
model GoogleKeywordTrackerTool {
  id         String                        @id @default(cuid())
  locationId String                        @unique
  active     Boolean                       @default(true)
  refresh    DayOfWeek[]
  keywords   GoogleKeywordTrackerKeyword[]
  // keyword    GoogleSearchKeyword[]

  // results    GoogleSearchProjectResult[]
  // competitor GoogleSearchCompetitor[]

  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model GoogleKeywordTrackerKeyword {
  id                         String   @id @default(cuid())
  googleKeywordTrackerToolId String
  keyword                    String
  createdAt                  DateTime @default(now())

  googleKeywordTrackerTool GoogleKeywordTrackerTool @relation(fields: [googleKeywordTrackerToolId], references: [id], onDelete: Cascade)
  // googleSerpResult   GoogleSearchSerpResult[]
  // result             GoogleSearchResult[]
  // tags               GoogleSearchKeywordTag[]
  // keywordMetrics     GoogleAdsKeywordMetrics[]
}

// Google Location Tracker
model GoogleLocationTrackerTool {
  id         String      @id @default(cuid())
  locationId String      @unique
  active     Boolean     @default(true)
  refresh    DayOfWeek[]
  // keyword    GoogleSearchKeyword[]

  // results    GoogleSearchProjectResult[]
  // competitor GoogleSearchCompetitor[]

  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}
